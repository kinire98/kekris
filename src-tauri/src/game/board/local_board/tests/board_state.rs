use crate::{
    game::{
        board::{Board, cell::Cell, local_board::LocalBoard},
        pieces::Piece,
        queue::local_queue::LocalQueue,
    },
    init_trace::initialize,
};
// ! Incorrect tests as functionality changed
#[test]
fn board_state_1() {
    initialize();
    let expected_board = "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEIIIIEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEGGGGEEE";
    let mut board = LocalBoard::new(LocalQueue::default());
    board.cur_piece = Piece::I.try_into().unwrap();
    println!("{}", board.board_state().len());
    assert_eq!(expected_board, board.board_state());
}

#[test]
fn board_state_2() {
    initialize();
    let expected_board = "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEIIIIEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEGGGGEEEIIIIIIIIII";
    let mut board = LocalBoard::new(LocalQueue::default());
    for i in 190..200 {
        board.cells[i] = Cell::Full(Piece::I);
    }
    board.cur_piece = Piece::I.try_into().unwrap();
    println!("{:?}", board.cells);
    assert_eq!(expected_board, board.board_state());
}

#[test]
fn board_state_3() {
    initialize();
    let expected_board = "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEIIIIEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEGGGGEEEEEEIEEEEEEIIIIIIIIII";
    let mut board = LocalBoard::new(LocalQueue::default());
    board.cells[183] = Cell::Full(Piece::I);
    for i in 190..200 {
        board.cells[i] = Cell::Full(Piece::I);
    }
    board.cur_piece = Piece::I.try_into().unwrap();
    println!("{:?}", board.cells);
    assert_eq!(expected_board, board.board_state());
}
