---
import Layout from "../layouts/Layout.astro";
---

<Layout>
    <div id="board">
        <canvas height="760" width="380" id="main"></canvas>
        <canvas height="760" width="380" id="buffer"></canvas>
    </div>
</Layout>

<style>
canvas#main {
    border-inline: 1px solid #909090;
    border-bottom: 1px solid #909090;
}
#board { 
  position: absolute;
  left: 0;
  right: 0;
  top: -35%;
    display: flex;
    align-items: center;    
    justify-content: center;
    flex-direction: column-reverse;
    height: 100%;
}
</style>

<script>
import forbidBack from "../helpers/forbidBack";
import startDraw from "../board/board";
import manageInput from "../controls/keyboard";
import { getRepeatInterval, getStartRepeatInterval } from "../controls/interval";
document.addEventListener('DOMContentLoaded', () => {
    forbidBack();
    startDraw(document.getElementById("main")! as HTMLCanvasElement, document.getElementById("buffer")! as HTMLCanvasElement);
    const customRepeatInterval = getRepeatInterval(); // Customize this value (in milliseconds)
    const customStartRepeatInteval = getStartRepeatInterval();
    const keyIntervals: Record<string, NodeJS.Timeout> = {}; // Tracks active intervals for keys
    const keySet = new Set<string>();

      // Handle keydown event
    document.addEventListener('keydown', (event: KeyboardEvent) => {
      if (keyIntervals[event.key]) return;

      // Trigger the action immediately
      manageInput(event.key);

      // Set up a custom interval for repeated actions

    keySet.add(event.key);
      setTimeout(() => {
        if(keySet.has(event.key)) {
            keyIntervals[event.key] = setInterval(() => {
                manageInput(event.key);
            }, customRepeatInterval);
        }
      }, customStartRepeatInteval)
    });

    // Handle keyup event
    document.addEventListener('keyup', (event: KeyboardEvent) => {
        if(keySet.has(event.key))
            keySet.delete(event.key);
      if (keyIntervals[event.key]) {
        clearInterval(keyIntervals[event.key]);
        delete keyIntervals[event.key];
      }
    });
});

</script>